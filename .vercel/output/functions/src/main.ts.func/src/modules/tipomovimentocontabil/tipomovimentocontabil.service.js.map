{"version":3,"file":"tipomovimentocontabil.service.ts","sources":["C:\\repos\\contabil_back\\src\\modules\\tipomovimentocontabil\\tipomovimentocontabil.service.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;AAAA,2CAA+D;AAC/D,6CAAmD;AACnD,qCAAqC;AACrC,0FAAgF;AAKzE,IAAM,4BAA4B,GAAlC,MAAM,4BAA4B;IACvC,YAEmB,+BAAkE;QAAlE,oCAA+B,GAA/B,+BAA+B,CAAmC;IAClF,CAAC;IAEJ,KAAK,CAAC,MAAM,CAAC,8BAA8D;QACzE,MAAM,wBAAwB,GAAG,IAAI,CAAC,+BAA+B,CAAC,MAAM,CAAC,8BAA8B,CAAC,CAAC;QAC7G,OAAO,IAAI,CAAC,+BAA+B,CAAC,IAAI,CAAC,wBAAwB,CAAC,CAAC;IAC7E,CAAC;IAED,KAAK,CAAC,OAAO;QACX,OAAO,IAAI,CAAC,+BAA+B,CAAC,IAAI,EAAE,CAAC;IACrD,CAAC;IAED,KAAK,CAAC,OAAO,CAAC,EAAO;QACnB,MAAM,KAAK,GAAG,MAAM,IAAI,CAAC,+BAA+B,CAAC,OAAO,CAAC,EAAE,KAAK,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC;QACxF,IAAI,CAAC,KAAK,EAAE,CAAC;YACX,MAAM,IAAI,0BAAiB,CAAC,kCAAkC,EAAE,aAAa,CAAC,CAAC;QACjF,CAAC;QACD,OAAO,KAAK,CAAC;IACf,CAAC;IAED,KAAK,CAAC,MAAM,CAAC,EAAO,EAAE,8BAA8D;QAClF,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,+BAA+B,CAAC,MAAM,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,8BAA8B,CAAC,CAAC;QAC7G,IAAI,MAAM,CAAC,QAAQ,KAAK,CAAC,EAAE,CAAC;YAC1B,MAAM,IAAI,0BAAiB,CAAC,kCAAkC,EAAE,aAAa,CAAC,CAAC;QACjF,CAAC;QACD,OAAO,IAAI,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC;IAC1B,CAAC;IAED,KAAK,CAAC,MAAM,CAAC,EAAO;QAClB,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,+BAA+B,CAAC,MAAM,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC;QAC7E,IAAI,MAAM,CAAC,QAAQ,KAAK,CAAC,EAAE,CAAC;YAC1B,MAAM,IAAI,0BAAiB,CAAC,kCAAkC,EAAE,aAAa,CAAC,CAAC;QACjF,CAAC;IACH,CAAC;CACF,CAAA;AArCY,oEAA4B;uCAA5B,4BAA4B;IADxC,IAAA,mBAAU,GAAE;IAGR,WAAA,IAAA,0BAAgB,EAAC,oDAAqB,CAAC,CAAA;qCACU,oBAAU;GAHnD,4BAA4B,CAqCxC","sourcesContent":["import { Injectable, NotFoundException } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport { Tipomovimentocontabil } from './entities/tipomovimentocontabil.entity';\nimport { CreateTipomovimentocontabilDto } from './dto/create-tipomovimentocontabil.dto';\nimport { UpdateTipomovimentocontabilDto } from './dto/update-tipomovimentocontabil.dto';\n\n@Injectable()\nexport class TipomovimentocontabilService {\n  constructor(\n    @InjectRepository(Tipomovimentocontabil)\n    private readonly tipomovimentocontabilRepository: Repository<Tipomovimentocontabil>,\n  ) {}\n\n  async create(createTipomovimentocontabilDto: CreateTipomovimentocontabilDto): Promise<Tipomovimentocontabil> {\n    const newTipomovimentocontabil = this.tipomovimentocontabilRepository.create(createTipomovimentocontabilDto);\n    return this.tipomovimentocontabilRepository.save(newTipomovimentocontabil);\n  }\n\n  async findAll(): Promise<Tipomovimentocontabil[]> {\n    return this.tipomovimentocontabilRepository.find();\n  }\n\n  async findOne(id: any): Promise<Tipomovimentocontabil> {\n    const found = await this.tipomovimentocontabilRepository.findOne({ where: { id: id } });\n    if (!found) {\n      throw new NotFoundException(`Tipomovimentocontabil with id \"${id}\" not found`);\n    }\n    return found;\n  }\n\n  async update(id: any, updateTipomovimentocontabilDto: UpdateTipomovimentocontabilDto): Promise<Tipomovimentocontabil> {\n    const result = await this.tipomovimentocontabilRepository.update({ id: id }, updateTipomovimentocontabilDto);\n    if (result.affected === 0) {\n      throw new NotFoundException(`Tipomovimentocontabil with id \"${id}\" not found`);\n    }\n    return this.findOne(id);\n  }\n\n  async remove(id: any): Promise<void> {\n    const result = await this.tipomovimentocontabilRepository.delete({ id: id });\n    if (result.affected === 0) {\n      throw new NotFoundException(`Tipomovimentocontabil with id \"${id}\" not found`);\n    }\n  }\n}\n"]}