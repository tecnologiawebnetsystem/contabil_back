{"version":3,"file":"lancamentoscontabeis.service.ts","sources":["C:\\repos\\contabil_back\\src\\modules\\lancamentoscontabeis\\lancamentoscontabeis.service.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;AAAA,2CAA+D;AAC/D,6CAAmD;AACnD,qCAAqC;AACrC,wFAA8E;AAKvE,IAAM,2BAA2B,GAAjC,MAAM,2BAA2B;IACtC,YAEmB,8BAAgE;QAAhE,mCAA8B,GAA9B,8BAA8B,CAAkC;IAChF,CAAC;IAEJ,KAAK,CAAC,MAAM,CAAC,6BAA4D;QACvE,MAAM,uBAAuB,GAAG,IAAI,CAAC,8BAA8B,CAAC,MAAM,CAAC,6BAA6B,CAAC,CAAC;QAC1G,uBAAuB,CAAC,WAAW,GAAG,IAAI,IAAI,EAAE,CAAC;QACjD,OAAO,IAAI,CAAC,8BAA8B,CAAC,IAAI,CAAC,uBAAuB,CAAC,CAAC;IAC3E,CAAC;IAED,KAAK,CAAC,OAAO;QACX,OAAO,IAAI,CAAC,8BAA8B,CAAC,IAAI,EAAE,CAAC;IACpD,CAAC;IAED,KAAK,CAAC,OAAO,CAAC,YAAiB;QAC7B,MAAM,KAAK,GAAG,MAAM,IAAI,CAAC,8BAA8B,CAAC,OAAO,CAAC,EAAE,KAAK,EAAE,EAAE,YAAY,EAAE,YAAY,EAAE,EAAE,CAAC,CAAC;QAC3G,IAAI,CAAC,KAAK,EAAE,CAAC;YACX,MAAM,IAAI,0BAAiB,CAAC,2CAA2C,YAAY,aAAa,CAAC,CAAC;QACpG,CAAC;QACD,OAAO,KAAK,CAAC;IACf,CAAC;IAED,KAAK,CAAC,MAAM,CAAC,YAAiB,EAAE,6BAA4D;QAC1F,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,8BAA8B,CAAC,MAAM,CAAC,EAAE,YAAY,EAAE,YAAY,EAAE,EAAE,6BAA6B,CAAC,CAAC;QAC/H,IAAI,MAAM,CAAC,QAAQ,KAAK,CAAC,EAAE,CAAC;YAC1B,MAAM,IAAI,0BAAiB,CAAC,2CAA2C,YAAY,aAAa,CAAC,CAAC;QACpG,CAAC;QACD,OAAO,IAAI,CAAC,OAAO,CAAC,YAAY,CAAC,CAAC;IACpC,CAAC;IAED,KAAK,CAAC,MAAM,CAAC,YAAiB;QAC5B,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,8BAA8B,CAAC,MAAM,CAAC,EAAE,YAAY,EAAE,YAAY,EAAE,CAAC,CAAC;QAChG,IAAI,MAAM,CAAC,QAAQ,KAAK,CAAC,EAAE,CAAC;YAC1B,MAAM,IAAI,0BAAiB,CAAC,2CAA2C,YAAY,aAAa,CAAC,CAAC;QACpG,CAAC;IACH,CAAC;CACF,CAAA;AAtCY,kEAA2B;sCAA3B,2BAA2B;IADvC,IAAA,mBAAU,GAAE;IAGR,WAAA,IAAA,0BAAgB,EAAC,kDAAoB,CAAC,CAAA;qCACU,oBAAU;GAHlD,2BAA2B,CAsCvC","sourcesContent":["import { Injectable, NotFoundException } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport { Lancamentoscontabeis } from './entities/lancamentoscontabeis.entity';\nimport { CreateLancamentoscontabeisDto } from './dto/create-lancamentoscontabeis.dto';\nimport { UpdateLancamentoscontabeisDto } from './dto/update-lancamentoscontabeis.dto';\n\n@Injectable()\nexport class LancamentoscontabeisService {\n  constructor(\n    @InjectRepository(Lancamentoscontabeis)\n    private readonly lancamentoscontabeisRepository: Repository<Lancamentoscontabeis>,\n  ) {}\n\n  async create(createLancamentoscontabeisDto: CreateLancamentoscontabeisDto): Promise<Lancamentoscontabeis> {\n    const newLancamentoscontabeis = this.lancamentoscontabeisRepository.create(createLancamentoscontabeisDto);\n    newLancamentoscontabeis.DataCriacao = new Date();\n    return this.lancamentoscontabeisRepository.save(newLancamentoscontabeis);\n  }\n\n  async findAll(): Promise<Lancamentoscontabeis[]> {\n    return this.lancamentoscontabeisRepository.find();\n  }\n\n  async findOne(LancamentoID: any): Promise<Lancamentoscontabeis> {\n    const found = await this.lancamentoscontabeisRepository.findOne({ where: { LancamentoID: LancamentoID } });\n    if (!found) {\n      throw new NotFoundException(`Lancamentoscontabeis with LancamentoID \"${LancamentoID}\" not found`);\n    }\n    return found;\n  }\n\n  async update(LancamentoID: any, updateLancamentoscontabeisDto: UpdateLancamentoscontabeisDto): Promise<Lancamentoscontabeis> {\n    const result = await this.lancamentoscontabeisRepository.update({ LancamentoID: LancamentoID }, updateLancamentoscontabeisDto);\n    if (result.affected === 0) {\n      throw new NotFoundException(`Lancamentoscontabeis with LancamentoID \"${LancamentoID}\" not found`);\n    }\n    return this.findOne(LancamentoID);\n  }\n\n  async remove(LancamentoID: any): Promise<void> {\n    const result = await this.lancamentoscontabeisRepository.delete({ LancamentoID: LancamentoID });\n    if (result.affected === 0) {\n      throw new NotFoundException(`Lancamentoscontabeis with LancamentoID \"${LancamentoID}\" not found`);\n    }\n  }\n}\n"]}