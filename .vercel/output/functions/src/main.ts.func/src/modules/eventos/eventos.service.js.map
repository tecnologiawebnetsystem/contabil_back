{"version":3,"file":"eventos.service.ts","sources":["C:\\repos\\contabil_back\\src\\modules\\eventos\\eventos.service.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;AAAA,2CAA+D;AAC/D,6CAAmD;AACnD,qCAAqC;AACrC,8DAAoD;AAK7C,IAAM,cAAc,GAApB,MAAM,cAAc;IACzB,YAEmB,iBAAsC;QAAtC,sBAAiB,GAAjB,iBAAiB,CAAqB;IACtD,CAAC;IAEJ,KAAK,CAAC,MAAM,CAAC,gBAAkC;QAC7C,MAAM,UAAU,GAAG,IAAI,CAAC,iBAAiB,CAAC,MAAM,CAAC,gBAAgB,CAAC,CAAC;QACnE,OAAO,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;IACjD,CAAC;IAED,KAAK,CAAC,OAAO;QACX,OAAO,IAAI,CAAC,iBAAiB,CAAC,IAAI,EAAE,CAAC;IACvC,CAAC;IAED,KAAK,CAAC,OAAO,CAAC,EAAO;QACnB,MAAM,KAAK,GAAG,MAAM,IAAI,CAAC,iBAAiB,CAAC,OAAO,CAAC,EAAE,KAAK,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC;QAC1E,IAAI,CAAC,KAAK,EAAE,CAAC;YACX,MAAM,IAAI,0BAAiB,CAAC,oBAAoB,EAAE,aAAa,CAAC,CAAC;QACnE,CAAC;QACD,OAAO,KAAK,CAAC;IACf,CAAC;IAED,KAAK,CAAC,MAAM,CAAC,EAAO,EAAE,gBAAkC;QACtD,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,iBAAiB,CAAC,MAAM,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,gBAAgB,CAAC,CAAC;QACjF,IAAI,MAAM,CAAC,QAAQ,KAAK,CAAC,EAAE,CAAC;YAC1B,MAAM,IAAI,0BAAiB,CAAC,oBAAoB,EAAE,aAAa,CAAC,CAAC;QACnE,CAAC;QACD,OAAO,IAAI,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC;IAC1B,CAAC;IAED,KAAK,CAAC,MAAM,CAAC,EAAO;QAClB,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,iBAAiB,CAAC,MAAM,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC;QAC/D,IAAI,MAAM,CAAC,QAAQ,KAAK,CAAC,EAAE,CAAC;YAC1B,MAAM,IAAI,0BAAiB,CAAC,oBAAoB,EAAE,aAAa,CAAC,CAAC;QACnE,CAAC;IACH,CAAC;CACF,CAAA;AArCY,wCAAc;yBAAd,cAAc;IAD1B,IAAA,mBAAU,GAAE;IAGR,WAAA,IAAA,0BAAgB,EAAC,wBAAO,CAAC,CAAA;qCACU,oBAAU;GAHrC,cAAc,CAqC1B","sourcesContent":["import { Injectable, NotFoundException } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport { Eventos } from './entities/eventos.entity';\nimport { CreateEventosDto } from './dto/create-eventos.dto';\nimport { UpdateEventosDto } from './dto/update-eventos.dto';\n\n@Injectable()\nexport class EventosService {\n  constructor(\n    @InjectRepository(Eventos)\n    private readonly eventosRepository: Repository<Eventos>,\n  ) {}\n\n  async create(createEventosDto: CreateEventosDto): Promise<Eventos> {\n    const newEventos = this.eventosRepository.create(createEventosDto);\n    return this.eventosRepository.save(newEventos);\n  }\n\n  async findAll(): Promise<Eventos[]> {\n    return this.eventosRepository.find();\n  }\n\n  async findOne(id: any): Promise<Eventos> {\n    const found = await this.eventosRepository.findOne({ where: { id: id } });\n    if (!found) {\n      throw new NotFoundException(`Eventos with id \"${id}\" not found`);\n    }\n    return found;\n  }\n\n  async update(id: any, updateEventosDto: UpdateEventosDto): Promise<Eventos> {\n    const result = await this.eventosRepository.update({ id: id }, updateEventosDto);\n    if (result.affected === 0) {\n      throw new NotFoundException(`Eventos with id \"${id}\" not found`);\n    }\n    return this.findOne(id);\n  }\n\n  async remove(id: any): Promise<void> {\n    const result = await this.eventosRepository.delete({ id: id });\n    if (result.affected === 0) {\n      throw new NotFoundException(`Eventos with id \"${id}\" not found`);\n    }\n  }\n}\n"]}