{"version":3,"file":"contratosresseguro.service.ts","sources":["C:\\repos\\contabil_back\\src\\modules\\contratosresseguro\\contratosresseguro.service.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;AAAA,2CAA+D;AAC/D,6CAAmD;AACnD,qCAAqC;AACrC,oFAA0E;AAKnE,IAAM,yBAAyB,GAA/B,MAAM,yBAAyB;IACpC,YAEmB,4BAA4D;QAA5D,iCAA4B,GAA5B,4BAA4B,CAAgC;IAC5E,CAAC;IAEJ,KAAK,CAAC,MAAM,CAAC,2BAAwD;QACnE,MAAM,qBAAqB,GAAG,IAAI,CAAC,4BAA4B,CAAC,MAAM,CAAC,2BAA2B,CAAC,CAAC;QACpG,OAAO,IAAI,CAAC,4BAA4B,CAAC,IAAI,CAAC,qBAAqB,CAAC,CAAC;IACvE,CAAC;IAED,KAAK,CAAC,OAAO;QACX,OAAO,IAAI,CAAC,4BAA4B,CAAC,IAAI,EAAE,CAAC;IAClD,CAAC;IAED,KAAK,CAAC,OAAO,CAAC,UAAe;QAC3B,MAAM,KAAK,GAAG,MAAM,IAAI,CAAC,4BAA4B,CAAC,OAAO,CAAC,EAAE,KAAK,EAAE,EAAE,UAAU,EAAE,UAAU,EAAE,EAAE,CAAC,CAAC;QACrG,IAAI,CAAC,KAAK,EAAE,CAAC;YACX,MAAM,IAAI,0BAAiB,CAAC,uCAAuC,UAAU,aAAa,CAAC,CAAC;QAC9F,CAAC;QACD,OAAO,KAAK,CAAC;IACf,CAAC;IAED,KAAK,CAAC,MAAM,CAAC,UAAe,EAAE,2BAAwD;QACpF,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,4BAA4B,CAAC,MAAM,CAAC,EAAE,UAAU,EAAE,UAAU,EAAE,EAAE,2BAA2B,CAAC,CAAC;QACvH,IAAI,MAAM,CAAC,QAAQ,KAAK,CAAC,EAAE,CAAC;YAC1B,MAAM,IAAI,0BAAiB,CAAC,uCAAuC,UAAU,aAAa,CAAC,CAAC;QAC9F,CAAC;QACD,OAAO,IAAI,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC;IAClC,CAAC;IAED,KAAK,CAAC,MAAM,CAAC,UAAe;QAC1B,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,4BAA4B,CAAC,MAAM,CAAC,EAAE,UAAU,EAAE,UAAU,EAAE,CAAC,CAAC;QAC1F,IAAI,MAAM,CAAC,QAAQ,KAAK,CAAC,EAAE,CAAC;YAC1B,MAAM,IAAI,0BAAiB,CAAC,uCAAuC,UAAU,aAAa,CAAC,CAAC;QAC9F,CAAC;IACH,CAAC;CACF,CAAA;AArCY,8DAAyB;oCAAzB,yBAAyB;IADrC,IAAA,mBAAU,GAAE;IAGR,WAAA,IAAA,0BAAgB,EAAC,8CAAkB,CAAC,CAAA;qCACU,oBAAU;GAHhD,yBAAyB,CAqCrC","sourcesContent":["import { Injectable, NotFoundException } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport { Contratosresseguro } from './entities/contratosresseguro.entity';\nimport { CreateContratosresseguroDto } from './dto/create-contratosresseguro.dto';\nimport { UpdateContratosresseguroDto } from './dto/update-contratosresseguro.dto';\n\n@Injectable()\nexport class ContratosresseguroService {\n  constructor(\n    @InjectRepository(Contratosresseguro)\n    private readonly contratosresseguroRepository: Repository<Contratosresseguro>,\n  ) {}\n\n  async create(createContratosresseguroDto: CreateContratosresseguroDto): Promise<Contratosresseguro> {\n    const newContratosresseguro = this.contratosresseguroRepository.create(createContratosresseguroDto);\n    return this.contratosresseguroRepository.save(newContratosresseguro);\n  }\n\n  async findAll(): Promise<Contratosresseguro[]> {\n    return this.contratosresseguroRepository.find();\n  }\n\n  async findOne(ContratoID: any): Promise<Contratosresseguro> {\n    const found = await this.contratosresseguroRepository.findOne({ where: { ContratoID: ContratoID } });\n    if (!found) {\n      throw new NotFoundException(`Contratosresseguro with ContratoID \"${ContratoID}\" not found`);\n    }\n    return found;\n  }\n\n  async update(ContratoID: any, updateContratosresseguroDto: UpdateContratosresseguroDto): Promise<Contratosresseguro> {\n    const result = await this.contratosresseguroRepository.update({ ContratoID: ContratoID }, updateContratosresseguroDto);\n    if (result.affected === 0) {\n      throw new NotFoundException(`Contratosresseguro with ContratoID \"${ContratoID}\" not found`);\n    }\n    return this.findOne(ContratoID);\n  }\n\n  async remove(ContratoID: any): Promise<void> {\n    const result = await this.contratosresseguroRepository.delete({ ContratoID: ContratoID });\n    if (result.affected === 0) {\n      throw new NotFoundException(`Contratosresseguro with ContratoID \"${ContratoID}\" not found`);\n    }\n  }\n}\n"]}