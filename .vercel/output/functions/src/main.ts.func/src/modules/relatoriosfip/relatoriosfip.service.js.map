{"version":3,"file":"relatoriosfip.service.ts","sources":["C:\\repos\\contabil_back\\src\\modules\\relatoriosfip\\relatoriosfip.service.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;AAAA,2CAA+D;AAC/D,6CAAmD;AACnD,qCAAqC;AACrC,0EAAgE;AAKzD,IAAM,oBAAoB,GAA1B,MAAM,oBAAoB;IAC/B,YAEmB,uBAAkD;QAAlD,4BAAuB,GAAvB,uBAAuB,CAA2B;IAClE,CAAC;IAEJ,KAAK,CAAC,MAAM,CAAC,sBAA8C;QACzD,MAAM,gBAAgB,GAAG,IAAI,CAAC,uBAAuB,CAAC,MAAM,CAAC,sBAAsB,CAAC,CAAC;QACrF,OAAO,IAAI,CAAC,uBAAuB,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC;IAC7D,CAAC;IAED,KAAK,CAAC,OAAO;QACX,OAAO,IAAI,CAAC,uBAAuB,CAAC,IAAI,EAAE,CAAC;IAC7C,CAAC;IAED,KAAK,CAAC,OAAO,CAAC,WAAgB;QAC5B,MAAM,KAAK,GAAG,MAAM,IAAI,CAAC,uBAAuB,CAAC,OAAO,CAAC,EAAE,KAAK,EAAE,EAAE,WAAW,EAAE,WAAW,EAAE,EAAE,CAAC,CAAC;QAClG,IAAI,CAAC,KAAK,EAAE,CAAC;YACX,MAAM,IAAI,0BAAiB,CAAC,mCAAmC,WAAW,aAAa,CAAC,CAAC;QAC3F,CAAC;QACD,OAAO,KAAK,CAAC;IACf,CAAC;IAED,KAAK,CAAC,MAAM,CAAC,WAAgB,EAAE,sBAA8C;QAC3E,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,uBAAuB,CAAC,MAAM,CAAC,EAAE,WAAW,EAAE,WAAW,EAAE,EAAE,sBAAsB,CAAC,CAAC;QAC/G,IAAI,MAAM,CAAC,QAAQ,KAAK,CAAC,EAAE,CAAC;YAC1B,MAAM,IAAI,0BAAiB,CAAC,mCAAmC,WAAW,aAAa,CAAC,CAAC;QAC3F,CAAC;QACD,OAAO,IAAI,CAAC,OAAO,CAAC,WAAW,CAAC,CAAC;IACnC,CAAC;IAED,KAAK,CAAC,MAAM,CAAC,WAAgB;QAC3B,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,uBAAuB,CAAC,MAAM,CAAC,EAAE,WAAW,EAAE,WAAW,EAAE,CAAC,CAAC;QACvF,IAAI,MAAM,CAAC,QAAQ,KAAK,CAAC,EAAE,CAAC;YAC1B,MAAM,IAAI,0BAAiB,CAAC,mCAAmC,WAAW,aAAa,CAAC,CAAC;QAC3F,CAAC;IACH,CAAC;CACF,CAAA;AArCY,oDAAoB;+BAApB,oBAAoB;IADhC,IAAA,mBAAU,GAAE;IAGR,WAAA,IAAA,0BAAgB,EAAC,oCAAa,CAAC,CAAA;qCACU,oBAAU;GAH3C,oBAAoB,CAqChC","sourcesContent":["import { Injectable, NotFoundException } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport { Relatoriosfip } from './entities/relatoriosfip.entity';\nimport { CreateRelatoriosfipDto } from './dto/create-relatoriosfip.dto';\nimport { UpdateRelatoriosfipDto } from './dto/update-relatoriosfip.dto';\n\n@Injectable()\nexport class RelatoriosfipService {\n  constructor(\n    @InjectRepository(Relatoriosfip)\n    private readonly relatoriosfipRepository: Repository<Relatoriosfip>,\n  ) {}\n\n  async create(createRelatoriosfipDto: CreateRelatoriosfipDto): Promise<Relatoriosfip> {\n    const newRelatoriosfip = this.relatoriosfipRepository.create(createRelatoriosfipDto);\n    return this.relatoriosfipRepository.save(newRelatoriosfip);\n  }\n\n  async findAll(): Promise<Relatoriosfip[]> {\n    return this.relatoriosfipRepository.find();\n  }\n\n  async findOne(RelatorioID: any): Promise<Relatoriosfip> {\n    const found = await this.relatoriosfipRepository.findOne({ where: { RelatorioID: RelatorioID } });\n    if (!found) {\n      throw new NotFoundException(`Relatoriosfip with RelatorioID \"${RelatorioID}\" not found`);\n    }\n    return found;\n  }\n\n  async update(RelatorioID: any, updateRelatoriosfipDto: UpdateRelatoriosfipDto): Promise<Relatoriosfip> {\n    const result = await this.relatoriosfipRepository.update({ RelatorioID: RelatorioID }, updateRelatoriosfipDto);\n    if (result.affected === 0) {\n      throw new NotFoundException(`Relatoriosfip with RelatorioID \"${RelatorioID}\" not found`);\n    }\n    return this.findOne(RelatorioID);\n  }\n\n  async remove(RelatorioID: any): Promise<void> {\n    const result = await this.relatoriosfipRepository.delete({ RelatorioID: RelatorioID });\n    if (result.affected === 0) {\n      throw new NotFoundException(`Relatoriosfip with RelatorioID \"${RelatorioID}\" not found`);\n    }\n  }\n}\n"]}