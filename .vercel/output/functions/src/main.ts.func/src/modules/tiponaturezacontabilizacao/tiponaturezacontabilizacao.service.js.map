{"version":3,"file":"tiponaturezacontabilizacao.service.ts","sources":["C:\\repos\\contabil_back\\src\\modules\\tiponaturezacontabilizacao\\tiponaturezacontabilizacao.service.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;AAAA,2CAA+D;AAC/D,6CAAmD;AACnD,qCAAqC;AACrC,oGAA0F;AAKnF,IAAM,iCAAiC,GAAvC,MAAM,iCAAiC;IAC5C,YAEmB,oCAA4E;QAA5E,yCAAoC,GAApC,oCAAoC,CAAwC;IAC5F,CAAC;IAEJ,KAAK,CAAC,MAAM,CAAC,mCAAwE;QACnF,MAAM,6BAA6B,GAAG,IAAI,CAAC,oCAAoC,CAAC,MAAM,CAAC,mCAAmC,CAAC,CAAC;QAC5H,OAAO,IAAI,CAAC,oCAAoC,CAAC,IAAI,CAAC,6BAA6B,CAAC,CAAC;IACvF,CAAC;IAED,KAAK,CAAC,OAAO;QACX,OAAO,IAAI,CAAC,oCAAoC,CAAC,IAAI,EAAE,CAAC;IAC1D,CAAC;IAED,KAAK,CAAC,OAAO,CAAC,EAAO;QACnB,MAAM,KAAK,GAAG,MAAM,IAAI,CAAC,oCAAoC,CAAC,OAAO,CAAC,EAAE,KAAK,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC;QAC7F,IAAI,CAAC,KAAK,EAAE,CAAC;YACX,MAAM,IAAI,0BAAiB,CAAC,uCAAuC,EAAE,aAAa,CAAC,CAAC;QACtF,CAAC;QACD,OAAO,KAAK,CAAC;IACf,CAAC;IAED,KAAK,CAAC,MAAM,CAAC,EAAO,EAAE,mCAAwE;QAC5F,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,oCAAoC,CAAC,MAAM,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,mCAAmC,CAAC,CAAC;QACvH,IAAI,MAAM,CAAC,QAAQ,KAAK,CAAC,EAAE,CAAC;YAC1B,MAAM,IAAI,0BAAiB,CAAC,uCAAuC,EAAE,aAAa,CAAC,CAAC;QACtF,CAAC;QACD,OAAO,IAAI,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC;IAC1B,CAAC;IAED,KAAK,CAAC,MAAM,CAAC,EAAO;QAClB,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,oCAAoC,CAAC,MAAM,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC;QAClF,IAAI,MAAM,CAAC,QAAQ,KAAK,CAAC,EAAE,CAAC;YAC1B,MAAM,IAAI,0BAAiB,CAAC,uCAAuC,EAAE,aAAa,CAAC,CAAC;QACtF,CAAC;IACH,CAAC;CACF,CAAA;AArCY,8EAAiC;4CAAjC,iCAAiC;IAD7C,IAAA,mBAAU,GAAE;IAGR,WAAA,IAAA,0BAAgB,EAAC,8DAA0B,CAAC,CAAA;qCACU,oBAAU;GAHxD,iCAAiC,CAqC7C","sourcesContent":["import { Injectable, NotFoundException } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport { Tiponaturezacontabilizacao } from './entities/tiponaturezacontabilizacao.entity';\nimport { CreateTiponaturezacontabilizacaoDto } from './dto/create-tiponaturezacontabilizacao.dto';\nimport { UpdateTiponaturezacontabilizacaoDto } from './dto/update-tiponaturezacontabilizacao.dto';\n\n@Injectable()\nexport class TiponaturezacontabilizacaoService {\n  constructor(\n    @InjectRepository(Tiponaturezacontabilizacao)\n    private readonly tiponaturezacontabilizacaoRepository: Repository<Tiponaturezacontabilizacao>,\n  ) {}\n\n  async create(createTiponaturezacontabilizacaoDto: CreateTiponaturezacontabilizacaoDto): Promise<Tiponaturezacontabilizacao> {\n    const newTiponaturezacontabilizacao = this.tiponaturezacontabilizacaoRepository.create(createTiponaturezacontabilizacaoDto);\n    return this.tiponaturezacontabilizacaoRepository.save(newTiponaturezacontabilizacao);\n  }\n\n  async findAll(): Promise<Tiponaturezacontabilizacao[]> {\n    return this.tiponaturezacontabilizacaoRepository.find();\n  }\n\n  async findOne(id: any): Promise<Tiponaturezacontabilizacao> {\n    const found = await this.tiponaturezacontabilizacaoRepository.findOne({ where: { id: id } });\n    if (!found) {\n      throw new NotFoundException(`Tiponaturezacontabilizacao with id \"${id}\" not found`);\n    }\n    return found;\n  }\n\n  async update(id: any, updateTiponaturezacontabilizacaoDto: UpdateTiponaturezacontabilizacaoDto): Promise<Tiponaturezacontabilizacao> {\n    const result = await this.tiponaturezacontabilizacaoRepository.update({ id: id }, updateTiponaturezacontabilizacaoDto);\n    if (result.affected === 0) {\n      throw new NotFoundException(`Tiponaturezacontabilizacao with id \"${id}\" not found`);\n    }\n    return this.findOne(id);\n  }\n\n  async remove(id: any): Promise<void> {\n    const result = await this.tiponaturezacontabilizacaoRepository.delete({ id: id });\n    if (result.affected === 0) {\n      throw new NotFoundException(`Tiponaturezacontabilizacao with id \"${id}\" not found`);\n    }\n  }\n}\n"]}