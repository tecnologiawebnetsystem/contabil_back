{"version":3,"file":"tabuabiometrica.service.ts","sources":["C:\\repos\\contabil_back\\src\\modules\\tabuabiometrica\\tabuabiometrica.service.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;AAAA,2CAA+D;AAC/D,6CAAmD;AACnD,qCAAqC;AACrC,8EAAoE;AAK7D,IAAM,sBAAsB,GAA5B,MAAM,sBAAsB;IACjC,YAEmB,yBAAsD;QAAtD,8BAAyB,GAAzB,yBAAyB,CAA6B;IACtE,CAAC;IAEJ,KAAK,CAAC,MAAM,CAAC,wBAAkD;QAC7D,MAAM,kBAAkB,GAAG,IAAI,CAAC,yBAAyB,CAAC,MAAM,CAAC,wBAAwB,CAAC,CAAC;QAC3F,OAAO,IAAI,CAAC,yBAAyB,CAAC,IAAI,CAAC,kBAAkB,CAAC,CAAC;IACjE,CAAC;IAED,KAAK,CAAC,OAAO;QACX,OAAO,IAAI,CAAC,yBAAyB,CAAC,IAAI,EAAE,CAAC;IAC/C,CAAC;IAED,KAAK,CAAC,OAAO,CAAC,EAAO;QACnB,MAAM,KAAK,GAAG,MAAM,IAAI,CAAC,yBAAyB,CAAC,OAAO,CAAC,EAAE,KAAK,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC;QAClF,IAAI,CAAC,KAAK,EAAE,CAAC;YACX,MAAM,IAAI,0BAAiB,CAAC,4BAA4B,EAAE,aAAa,CAAC,CAAC;QAC3E,CAAC;QACD,OAAO,KAAK,CAAC;IACf,CAAC;IAED,KAAK,CAAC,MAAM,CAAC,EAAO,EAAE,wBAAkD;QACtE,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,yBAAyB,CAAC,MAAM,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,wBAAwB,CAAC,CAAC;QACjG,IAAI,MAAM,CAAC,QAAQ,KAAK,CAAC,EAAE,CAAC;YAC1B,MAAM,IAAI,0BAAiB,CAAC,4BAA4B,EAAE,aAAa,CAAC,CAAC;QAC3E,CAAC;QACD,OAAO,IAAI,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC;IAC1B,CAAC;IAED,KAAK,CAAC,MAAM,CAAC,EAAO;QAClB,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,yBAAyB,CAAC,MAAM,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC;QACvE,IAAI,MAAM,CAAC,QAAQ,KAAK,CAAC,EAAE,CAAC;YAC1B,MAAM,IAAI,0BAAiB,CAAC,4BAA4B,EAAE,aAAa,CAAC,CAAC;QAC3E,CAAC;IACH,CAAC;CACF,CAAA;AArCY,wDAAsB;iCAAtB,sBAAsB;IADlC,IAAA,mBAAU,GAAE;IAGR,WAAA,IAAA,0BAAgB,EAAC,wCAAe,CAAC,CAAA;qCACU,oBAAU;GAH7C,sBAAsB,CAqClC","sourcesContent":["import { Injectable, NotFoundException } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport { Tabuabiometrica } from './entities/tabuabiometrica.entity';\nimport { CreateTabuabiometricaDto } from './dto/create-tabuabiometrica.dto';\nimport { UpdateTabuabiometricaDto } from './dto/update-tabuabiometrica.dto';\n\n@Injectable()\nexport class TabuabiometricaService {\n  constructor(\n    @InjectRepository(Tabuabiometrica)\n    private readonly tabuabiometricaRepository: Repository<Tabuabiometrica>,\n  ) {}\n\n  async create(createTabuabiometricaDto: CreateTabuabiometricaDto): Promise<Tabuabiometrica> {\n    const newTabuabiometrica = this.tabuabiometricaRepository.create(createTabuabiometricaDto);\n    return this.tabuabiometricaRepository.save(newTabuabiometrica);\n  }\n\n  async findAll(): Promise<Tabuabiometrica[]> {\n    return this.tabuabiometricaRepository.find();\n  }\n\n  async findOne(id: any): Promise<Tabuabiometrica> {\n    const found = await this.tabuabiometricaRepository.findOne({ where: { id: id } });\n    if (!found) {\n      throw new NotFoundException(`Tabuabiometrica with id \"${id}\" not found`);\n    }\n    return found;\n  }\n\n  async update(id: any, updateTabuabiometricaDto: UpdateTabuabiometricaDto): Promise<Tabuabiometrica> {\n    const result = await this.tabuabiometricaRepository.update({ id: id }, updateTabuabiometricaDto);\n    if (result.affected === 0) {\n      throw new NotFoundException(`Tabuabiometrica with id \"${id}\" not found`);\n    }\n    return this.findOne(id);\n  }\n\n  async remove(id: any): Promise<void> {\n    const result = await this.tabuabiometricaRepository.delete({ id: id });\n    if (result.affected === 0) {\n      throw new NotFoundException(`Tabuabiometrica with id \"${id}\" not found`);\n    }\n  }\n}\n"]}