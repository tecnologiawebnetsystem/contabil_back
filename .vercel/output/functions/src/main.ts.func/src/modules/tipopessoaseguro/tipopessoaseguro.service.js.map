{"version":3,"file":"tipopessoaseguro.service.ts","sources":["C:\\repos\\contabil_back\\src\\modules\\tipopessoaseguro\\tipopessoaseguro.service.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;AAAA,2CAA+D;AAC/D,6CAAmD;AACnD,qCAAqC;AACrC,gFAAsE;AAK/D,IAAM,uBAAuB,GAA7B,MAAM,uBAAuB;IAClC,YAEmB,0BAAwD;QAAxD,+BAA0B,GAA1B,0BAA0B,CAA8B;IACxE,CAAC;IAEJ,KAAK,CAAC,MAAM,CAAC,yBAAoD;QAC/D,MAAM,mBAAmB,GAAG,IAAI,CAAC,0BAA0B,CAAC,MAAM,CAAC,yBAAyB,CAAC,CAAC;QAC9F,OAAO,IAAI,CAAC,0BAA0B,CAAC,IAAI,CAAC,mBAAmB,CAAC,CAAC;IACnE,CAAC;IAED,KAAK,CAAC,OAAO;QACX,OAAO,IAAI,CAAC,0BAA0B,CAAC,IAAI,EAAE,CAAC;IAChD,CAAC;IAED,KAAK,CAAC,OAAO,CAAC,EAAO;QACnB,MAAM,KAAK,GAAG,MAAM,IAAI,CAAC,0BAA0B,CAAC,OAAO,CAAC,EAAE,KAAK,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC;QACnF,IAAI,CAAC,KAAK,EAAE,CAAC;YACX,MAAM,IAAI,0BAAiB,CAAC,6BAA6B,EAAE,aAAa,CAAC,CAAC;QAC5E,CAAC;QACD,OAAO,KAAK,CAAC;IACf,CAAC;IAED,KAAK,CAAC,MAAM,CAAC,EAAO,EAAE,yBAAoD;QACxE,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,0BAA0B,CAAC,MAAM,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,yBAAyB,CAAC,CAAC;QACnG,IAAI,MAAM,CAAC,QAAQ,KAAK,CAAC,EAAE,CAAC;YAC1B,MAAM,IAAI,0BAAiB,CAAC,6BAA6B,EAAE,aAAa,CAAC,CAAC;QAC5E,CAAC;QACD,OAAO,IAAI,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC;IAC1B,CAAC;IAED,KAAK,CAAC,MAAM,CAAC,EAAO;QAClB,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,0BAA0B,CAAC,MAAM,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC;QACxE,IAAI,MAAM,CAAC,QAAQ,KAAK,CAAC,EAAE,CAAC;YAC1B,MAAM,IAAI,0BAAiB,CAAC,6BAA6B,EAAE,aAAa,CAAC,CAAC;QAC5E,CAAC;IACH,CAAC;CACF,CAAA;AArCY,0DAAuB;kCAAvB,uBAAuB;IADnC,IAAA,mBAAU,GAAE;IAGR,WAAA,IAAA,0BAAgB,EAAC,0CAAgB,CAAC,CAAA;qCACU,oBAAU;GAH9C,uBAAuB,CAqCnC","sourcesContent":["import { Injectable, NotFoundException } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport { Tipopessoaseguro } from './entities/tipopessoaseguro.entity';\nimport { CreateTipopessoaseguroDto } from './dto/create-tipopessoaseguro.dto';\nimport { UpdateTipopessoaseguroDto } from './dto/update-tipopessoaseguro.dto';\n\n@Injectable()\nexport class TipopessoaseguroService {\n  constructor(\n    @InjectRepository(Tipopessoaseguro)\n    private readonly tipopessoaseguroRepository: Repository<Tipopessoaseguro>,\n  ) {}\n\n  async create(createTipopessoaseguroDto: CreateTipopessoaseguroDto): Promise<Tipopessoaseguro> {\n    const newTipopessoaseguro = this.tipopessoaseguroRepository.create(createTipopessoaseguroDto);\n    return this.tipopessoaseguroRepository.save(newTipopessoaseguro);\n  }\n\n  async findAll(): Promise<Tipopessoaseguro[]> {\n    return this.tipopessoaseguroRepository.find();\n  }\n\n  async findOne(id: any): Promise<Tipopessoaseguro> {\n    const found = await this.tipopessoaseguroRepository.findOne({ where: { id: id } });\n    if (!found) {\n      throw new NotFoundException(`Tipopessoaseguro with id \"${id}\" not found`);\n    }\n    return found;\n  }\n\n  async update(id: any, updateTipopessoaseguroDto: UpdateTipopessoaseguroDto): Promise<Tipopessoaseguro> {\n    const result = await this.tipopessoaseguroRepository.update({ id: id }, updateTipopessoaseguroDto);\n    if (result.affected === 0) {\n      throw new NotFoundException(`Tipopessoaseguro with id \"${id}\" not found`);\n    }\n    return this.findOne(id);\n  }\n\n  async remove(id: any): Promise<void> {\n    const result = await this.tipopessoaseguroRepository.delete({ id: id });\n    if (result.affected === 0) {\n      throw new NotFoundException(`Tipopessoaseguro with id \"${id}\" not found`);\n    }\n  }\n}\n"]}