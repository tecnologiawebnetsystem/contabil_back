{"version":3,"file":"configquadroscirculares.service.ts","sources":["C:\\repos\\contabil_back\\src\\modules\\configquadroscirculares\\configquadroscirculares.service.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;AAAA,2CAA+D;AAC/D,6CAAmD;AACnD,qCAAqC;AACrC,8FAAoF;AAK7E,IAAM,8BAA8B,GAApC,MAAM,8BAA8B;IACzC,YAEmB,iCAAsE;QAAtE,sCAAiC,GAAjC,iCAAiC,CAAqC;IACtF,CAAC;IAEJ,KAAK,CAAC,MAAM,CAAC,gCAAkE;QAC7E,MAAM,0BAA0B,GAAG,IAAI,CAAC,iCAAiC,CAAC,MAAM,CAAC,gCAAgC,CAAC,CAAC;QACnH,OAAO,IAAI,CAAC,iCAAiC,CAAC,IAAI,CAAC,0BAA0B,CAAC,CAAC;IACjF,CAAC;IAED,KAAK,CAAC,OAAO;QACX,OAAO,IAAI,CAAC,iCAAiC,CAAC,IAAI,EAAE,CAAC;IACvD,CAAC;IAED,KAAK,CAAC,OAAO,CAAC,EAAO;QACnB,MAAM,KAAK,GAAG,MAAM,IAAI,CAAC,iCAAiC,CAAC,OAAO,CAAC,EAAE,KAAK,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC;QAC1F,IAAI,CAAC,KAAK,EAAE,CAAC;YACX,MAAM,IAAI,0BAAiB,CAAC,oCAAoC,EAAE,aAAa,CAAC,CAAC;QACnF,CAAC;QACD,OAAO,KAAK,CAAC;IACf,CAAC;IAED,KAAK,CAAC,MAAM,CAAC,EAAO,EAAE,gCAAkE;QACtF,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,iCAAiC,CAAC,MAAM,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,gCAAgC,CAAC,CAAC;QACjH,IAAI,MAAM,CAAC,QAAQ,KAAK,CAAC,EAAE,CAAC;YAC1B,MAAM,IAAI,0BAAiB,CAAC,oCAAoC,EAAE,aAAa,CAAC,CAAC;QACnF,CAAC;QACD,OAAO,IAAI,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC;IAC1B,CAAC;IAED,KAAK,CAAC,MAAM,CAAC,EAAO;QAClB,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,iCAAiC,CAAC,MAAM,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC;QAC/E,IAAI,MAAM,CAAC,QAAQ,KAAK,CAAC,EAAE,CAAC;YAC1B,MAAM,IAAI,0BAAiB,CAAC,oCAAoC,EAAE,aAAa,CAAC,CAAC;QACnF,CAAC;IACH,CAAC;CACF,CAAA;AArCY,wEAA8B;yCAA9B,8BAA8B;IAD1C,IAAA,mBAAU,GAAE;IAGR,WAAA,IAAA,0BAAgB,EAAC,wDAAuB,CAAC,CAAA;qCACU,oBAAU;GAHrD,8BAA8B,CAqC1C","sourcesContent":["import { Injectable, NotFoundException } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport { Configquadroscirculares } from './entities/configquadroscirculares.entity';\nimport { CreateConfigquadroscircularesDto } from './dto/create-configquadroscirculares.dto';\nimport { UpdateConfigquadroscircularesDto } from './dto/update-configquadroscirculares.dto';\n\n@Injectable()\nexport class ConfigquadroscircularesService {\n  constructor(\n    @InjectRepository(Configquadroscirculares)\n    private readonly configquadroscircularesRepository: Repository<Configquadroscirculares>,\n  ) {}\n\n  async create(createConfigquadroscircularesDto: CreateConfigquadroscircularesDto): Promise<Configquadroscirculares> {\n    const newConfigquadroscirculares = this.configquadroscircularesRepository.create(createConfigquadroscircularesDto);\n    return this.configquadroscircularesRepository.save(newConfigquadroscirculares);\n  }\n\n  async findAll(): Promise<Configquadroscirculares[]> {\n    return this.configquadroscircularesRepository.find();\n  }\n\n  async findOne(id: any): Promise<Configquadroscirculares> {\n    const found = await this.configquadroscircularesRepository.findOne({ where: { id: id } });\n    if (!found) {\n      throw new NotFoundException(`Configquadroscirculares with id \"${id}\" not found`);\n    }\n    return found;\n  }\n\n  async update(id: any, updateConfigquadroscircularesDto: UpdateConfigquadroscircularesDto): Promise<Configquadroscirculares> {\n    const result = await this.configquadroscircularesRepository.update({ id: id }, updateConfigquadroscircularesDto);\n    if (result.affected === 0) {\n      throw new NotFoundException(`Configquadroscirculares with id \"${id}\" not found`);\n    }\n    return this.findOne(id);\n  }\n\n  async remove(id: any): Promise<void> {\n    const result = await this.configquadroscircularesRepository.delete({ id: id });\n    if (result.affected === 0) {\n      throw new NotFoundException(`Configquadroscirculares with id \"${id}\" not found`);\n    }\n  }\n}\n"]}