{"version":3,"file":"ramocontabil.service.ts","sources":["C:\\repos\\contabil_back\\src\\modules\\ramocontabil\\ramocontabil.service.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;AAAA,2CAA+D;AAC/D,6CAAmD;AACnD,qCAAqC;AACrC,wEAA8D;AAKvD,IAAM,mBAAmB,GAAzB,MAAM,mBAAmB;IAC9B,YAEmB,sBAAgD;QAAhD,2BAAsB,GAAtB,sBAAsB,CAA0B;IAChE,CAAC;IAEJ,KAAK,CAAC,MAAM,CAAC,qBAA4C;QACvD,MAAM,eAAe,GAAG,IAAI,CAAC,sBAAsB,CAAC,MAAM,CAAC,qBAAqB,CAAC,CAAC;QAClF,OAAO,IAAI,CAAC,sBAAsB,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC;IAC3D,CAAC;IAED,KAAK,CAAC,OAAO;QACX,OAAO,IAAI,CAAC,sBAAsB,CAAC,IAAI,EAAE,CAAC;IAC5C,CAAC;IAED,KAAK,CAAC,OAAO,CAAC,EAAO;QACnB,MAAM,KAAK,GAAG,MAAM,IAAI,CAAC,sBAAsB,CAAC,OAAO,CAAC,EAAE,KAAK,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC;QAC/E,IAAI,CAAC,KAAK,EAAE,CAAC;YACX,MAAM,IAAI,0BAAiB,CAAC,yBAAyB,EAAE,aAAa,CAAC,CAAC;QACxE,CAAC;QACD,OAAO,KAAK,CAAC;IACf,CAAC;IAED,KAAK,CAAC,MAAM,CAAC,EAAO,EAAE,qBAA4C;QAChE,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,sBAAsB,CAAC,MAAM,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,qBAAqB,CAAC,CAAC;QAC3F,IAAI,MAAM,CAAC,QAAQ,KAAK,CAAC,EAAE,CAAC;YAC1B,MAAM,IAAI,0BAAiB,CAAC,yBAAyB,EAAE,aAAa,CAAC,CAAC;QACxE,CAAC;QACD,OAAO,IAAI,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC;IAC1B,CAAC;IAED,KAAK,CAAC,MAAM,CAAC,EAAO;QAClB,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,sBAAsB,CAAC,MAAM,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC;QACpE,IAAI,MAAM,CAAC,QAAQ,KAAK,CAAC,EAAE,CAAC;YAC1B,MAAM,IAAI,0BAAiB,CAAC,yBAAyB,EAAE,aAAa,CAAC,CAAC;QACxE,CAAC;IACH,CAAC;CACF,CAAA;AArCY,kDAAmB;8BAAnB,mBAAmB;IAD/B,IAAA,mBAAU,GAAE;IAGR,WAAA,IAAA,0BAAgB,EAAC,kCAAY,CAAC,CAAA;qCACU,oBAAU;GAH1C,mBAAmB,CAqC/B","sourcesContent":["import { Injectable, NotFoundException } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport { Ramocontabil } from './entities/ramocontabil.entity';\nimport { CreateRamocontabilDto } from './dto/create-ramocontabil.dto';\nimport { UpdateRamocontabilDto } from './dto/update-ramocontabil.dto';\n\n@Injectable()\nexport class RamocontabilService {\n  constructor(\n    @InjectRepository(Ramocontabil)\n    private readonly ramocontabilRepository: Repository<Ramocontabil>,\n  ) {}\n\n  async create(createRamocontabilDto: CreateRamocontabilDto): Promise<Ramocontabil> {\n    const newRamocontabil = this.ramocontabilRepository.create(createRamocontabilDto);\n    return this.ramocontabilRepository.save(newRamocontabil);\n  }\n\n  async findAll(): Promise<Ramocontabil[]> {\n    return this.ramocontabilRepository.find();\n  }\n\n  async findOne(id: any): Promise<Ramocontabil> {\n    const found = await this.ramocontabilRepository.findOne({ where: { id: id } });\n    if (!found) {\n      throw new NotFoundException(`Ramocontabil with id \"${id}\" not found`);\n    }\n    return found;\n  }\n\n  async update(id: any, updateRamocontabilDto: UpdateRamocontabilDto): Promise<Ramocontabil> {\n    const result = await this.ramocontabilRepository.update({ id: id }, updateRamocontabilDto);\n    if (result.affected === 0) {\n      throw new NotFoundException(`Ramocontabil with id \"${id}\" not found`);\n    }\n    return this.findOne(id);\n  }\n\n  async remove(id: any): Promise<void> {\n    const result = await this.ramocontabilRepository.delete({ id: id });\n    if (result.affected === 0) {\n      throw new NotFoundException(`Ramocontabil with id \"${id}\" not found`);\n    }\n  }\n}\n"]}