{"version":3,"file":"tipoapolice.service.ts","sources":["C:\\repos\\contabil_back\\src\\modules\\tipoapolice\\tipoapolice.service.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;AAAA,2CAA+D;AAC/D,6CAAmD;AACnD,qCAAqC;AACrC,sEAA4D;AAKrD,IAAM,kBAAkB,GAAxB,MAAM,kBAAkB;IAC7B,YAEmB,qBAA8C;QAA9C,0BAAqB,GAArB,qBAAqB,CAAyB;IAC9D,CAAC;IAEJ,KAAK,CAAC,MAAM,CAAC,oBAA0C;QACrD,MAAM,cAAc,GAAG,IAAI,CAAC,qBAAqB,CAAC,MAAM,CAAC,oBAAoB,CAAC,CAAC;QAC/E,OAAO,IAAI,CAAC,qBAAqB,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC;IACzD,CAAC;IAED,KAAK,CAAC,OAAO;QACX,OAAO,IAAI,CAAC,qBAAqB,CAAC,IAAI,EAAE,CAAC;IAC3C,CAAC;IAED,KAAK,CAAC,OAAO,CAAC,EAAO;QACnB,MAAM,KAAK,GAAG,MAAM,IAAI,CAAC,qBAAqB,CAAC,OAAO,CAAC,EAAE,KAAK,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC;QAC9E,IAAI,CAAC,KAAK,EAAE,CAAC;YACX,MAAM,IAAI,0BAAiB,CAAC,wBAAwB,EAAE,aAAa,CAAC,CAAC;QACvE,CAAC;QACD,OAAO,KAAK,CAAC;IACf,CAAC;IAED,KAAK,CAAC,MAAM,CAAC,EAAO,EAAE,oBAA0C;QAC9D,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,qBAAqB,CAAC,MAAM,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,oBAAoB,CAAC,CAAC;QACzF,IAAI,MAAM,CAAC,QAAQ,KAAK,CAAC,EAAE,CAAC;YAC1B,MAAM,IAAI,0BAAiB,CAAC,wBAAwB,EAAE,aAAa,CAAC,CAAC;QACvE,CAAC;QACD,OAAO,IAAI,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC;IAC1B,CAAC;IAED,KAAK,CAAC,MAAM,CAAC,EAAO;QAClB,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,qBAAqB,CAAC,MAAM,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC;QACnE,IAAI,MAAM,CAAC,QAAQ,KAAK,CAAC,EAAE,CAAC;YAC1B,MAAM,IAAI,0BAAiB,CAAC,wBAAwB,EAAE,aAAa,CAAC,CAAC;QACvE,CAAC;IACH,CAAC;CACF,CAAA;AArCY,gDAAkB;6BAAlB,kBAAkB;IAD9B,IAAA,mBAAU,GAAE;IAGR,WAAA,IAAA,0BAAgB,EAAC,gCAAW,CAAC,CAAA;qCACU,oBAAU;GAHzC,kBAAkB,CAqC9B","sourcesContent":["import { Injectable, NotFoundException } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport { Tipoapolice } from './entities/tipoapolice.entity';\nimport { CreateTipoapoliceDto } from './dto/create-tipoapolice.dto';\nimport { UpdateTipoapoliceDto } from './dto/update-tipoapolice.dto';\n\n@Injectable()\nexport class TipoapoliceService {\n  constructor(\n    @InjectRepository(Tipoapolice)\n    private readonly tipoapoliceRepository: Repository<Tipoapolice>,\n  ) {}\n\n  async create(createTipoapoliceDto: CreateTipoapoliceDto): Promise<Tipoapolice> {\n    const newTipoapolice = this.tipoapoliceRepository.create(createTipoapoliceDto);\n    return this.tipoapoliceRepository.save(newTipoapolice);\n  }\n\n  async findAll(): Promise<Tipoapolice[]> {\n    return this.tipoapoliceRepository.find();\n  }\n\n  async findOne(id: any): Promise<Tipoapolice> {\n    const found = await this.tipoapoliceRepository.findOne({ where: { id: id } });\n    if (!found) {\n      throw new NotFoundException(`Tipoapolice with id \"${id}\" not found`);\n    }\n    return found;\n  }\n\n  async update(id: any, updateTipoapoliceDto: UpdateTipoapoliceDto): Promise<Tipoapolice> {\n    const result = await this.tipoapoliceRepository.update({ id: id }, updateTipoapoliceDto);\n    if (result.affected === 0) {\n      throw new NotFoundException(`Tipoapolice with id \"${id}\" not found`);\n    }\n    return this.findOne(id);\n  }\n\n  async remove(id: any): Promise<void> {\n    const result = await this.tipoapoliceRepository.delete({ id: id });\n    if (result.affected === 0) {\n      throw new NotFoundException(`Tipoapolice with id \"${id}\" not found`);\n    }\n  }\n}\n"]}