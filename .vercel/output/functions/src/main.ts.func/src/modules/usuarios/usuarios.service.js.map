{"version":3,"file":"usuarios.service.ts","sources":["C:\\repos\\contabil_back\\src\\modules\\usuarios\\usuarios.service.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;AAAA,2CAA+D;AAC/D,6CAAmD;AACnD,qCAAqC;AACrC,gEAAsD;AAK/C,IAAM,eAAe,GAArB,MAAM,eAAe;IAC1B,YAEmB,kBAAwC;QAAxC,uBAAkB,GAAlB,kBAAkB,CAAsB;IACxD,CAAC;IAEJ,KAAK,CAAC,MAAM,CAAC,iBAAoC;QAC/C,MAAM,WAAW,GAAG,IAAI,CAAC,kBAAkB,CAAC,MAAM,CAAC,iBAAiB,CAAC,CAAC;QACtE,WAAW,CAAC,WAAW,GAAG,IAAI,IAAI,EAAE,CAAC;QACrC,WAAW,CAAC,eAAe,GAAG,IAAI,IAAI,EAAE,CAAC;QACzC,OAAO,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;IACnD,CAAC;IAED,KAAK,CAAC,OAAO;QACX,OAAO,IAAI,CAAC,kBAAkB,CAAC,IAAI,EAAE,CAAC;IACxC,CAAC;IAED,KAAK,CAAC,OAAO,CAAC,SAAc;QAC1B,MAAM,KAAK,GAAG,MAAM,IAAI,CAAC,kBAAkB,CAAC,OAAO,CAAC,EAAE,KAAK,EAAE,EAAE,SAAS,EAAE,SAAS,EAAE,EAAE,CAAC,CAAC;QACzF,IAAI,CAAC,KAAK,EAAE,CAAC;YACX,MAAM,IAAI,0BAAiB,CAAC,4BAA4B,SAAS,aAAa,CAAC,CAAC;QAClF,CAAC;QACD,OAAO,KAAK,CAAC;IACf,CAAC;IAED,KAAK,CAAC,MAAM,CAAC,SAAc,EAAE,iBAAoC;QAC/D,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,kBAAkB,CAAC,MAAM,CAAC,EAAE,SAAS,EAAE,SAAS,EAAE,EAAE,iBAAiB,CAAC,CAAC;QACjG,IAAI,MAAM,CAAC,QAAQ,KAAK,CAAC,EAAE,CAAC;YAC1B,MAAM,IAAI,0BAAiB,CAAC,4BAA4B,SAAS,aAAa,CAAC,CAAC;QAClF,CAAC;QACD,OAAO,IAAI,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC;IACjC,CAAC;IAED,KAAK,CAAC,MAAM,CAAC,SAAc;QACzB,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,kBAAkB,CAAC,MAAM,CAAC,EAAE,SAAS,EAAE,SAAS,EAAE,CAAC,CAAC;QAC9E,IAAI,MAAM,CAAC,QAAQ,KAAK,CAAC,EAAE,CAAC;YAC1B,MAAM,IAAI,0BAAiB,CAAC,4BAA4B,SAAS,aAAa,CAAC,CAAC;QAClF,CAAC;IACH,CAAC;CACF,CAAA;AAvCY,0CAAe;0BAAf,eAAe;IAD3B,IAAA,mBAAU,GAAE;IAGR,WAAA,IAAA,0BAAgB,EAAC,0BAAQ,CAAC,CAAA;qCACU,oBAAU;GAHtC,eAAe,CAuC3B","sourcesContent":["import { Injectable, NotFoundException } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport { Usuarios } from './entities/usuarios.entity';\nimport { CreateUsuariosDto } from './dto/create-usuarios.dto';\nimport { UpdateUsuariosDto } from './dto/update-usuarios.dto';\n\n@Injectable()\nexport class UsuariosService {\n  constructor(\n    @InjectRepository(Usuarios)\n    private readonly usuariosRepository: Repository<Usuarios>,\n  ) {}\n\n  async create(createUsuariosDto: CreateUsuariosDto): Promise<Usuarios> {\n    const newUsuarios = this.usuariosRepository.create(createUsuariosDto);\n    newUsuarios.DataCriacao = new Date();\n    newUsuarios.DataAtualizacao = new Date();\n    return this.usuariosRepository.save(newUsuarios);\n  }\n\n  async findAll(): Promise<Usuarios[]> {\n    return this.usuariosRepository.find();\n  }\n\n  async findOne(UsuarioID: any): Promise<Usuarios> {\n    const found = await this.usuariosRepository.findOne({ where: { UsuarioID: UsuarioID } });\n    if (!found) {\n      throw new NotFoundException(`Usuarios with UsuarioID \"${UsuarioID}\" not found`);\n    }\n    return found;\n  }\n\n  async update(UsuarioID: any, updateUsuariosDto: UpdateUsuariosDto): Promise<Usuarios> {\n    const result = await this.usuariosRepository.update({ UsuarioID: UsuarioID }, updateUsuariosDto);\n    if (result.affected === 0) {\n      throw new NotFoundException(`Usuarios with UsuarioID \"${UsuarioID}\" not found`);\n    }\n    return this.findOne(UsuarioID);\n  }\n\n  async remove(UsuarioID: any): Promise<void> {\n    const result = await this.usuariosRepository.delete({ UsuarioID: UsuarioID });\n    if (result.affected === 0) {\n      throw new NotFoundException(`Usuarios with UsuarioID \"${UsuarioID}\" not found`);\n    }\n  }\n}\n"]}