{"version":3,"file":"planocontas.service.ts","sources":["C:\\repos\\contabil_back\\src\\modules\\planocontas\\planocontas.service.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;AAAA,2CAA+D;AAC/D,6CAAmD;AACnD,qCAAqC;AACrC,sEAA4D;AAKrD,IAAM,kBAAkB,GAAxB,MAAM,kBAAkB;IAC7B,YAEmB,qBAA8C;QAA9C,0BAAqB,GAArB,qBAAqB,CAAyB;IAC9D,CAAC;IAEJ,KAAK,CAAC,MAAM,CAAC,oBAA0C;QACrD,MAAM,cAAc,GAAG,IAAI,CAAC,qBAAqB,CAAC,MAAM,CAAC,oBAAoB,CAAC,CAAC;QAC/E,OAAO,IAAI,CAAC,qBAAqB,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC;IACzD,CAAC;IAED,KAAK,CAAC,OAAO;QACX,OAAO,IAAI,CAAC,qBAAqB,CAAC,IAAI,EAAE,CAAC;IAC3C,CAAC;IAED,KAAK,CAAC,OAAO,CAAC,OAAY;QACxB,MAAM,KAAK,GAAG,MAAM,IAAI,CAAC,qBAAqB,CAAC,OAAO,CAAC,EAAE,KAAK,EAAE,EAAE,OAAO,EAAE,OAAO,EAAE,EAAE,CAAC,CAAC;QACxF,IAAI,CAAC,KAAK,EAAE,CAAC;YACX,MAAM,IAAI,0BAAiB,CAAC,6BAA6B,OAAO,aAAa,CAAC,CAAC;QACjF,CAAC;QACD,OAAO,KAAK,CAAC;IACf,CAAC;IAED,KAAK,CAAC,MAAM,CAAC,OAAY,EAAE,oBAA0C;QACnE,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,qBAAqB,CAAC,MAAM,CAAC,EAAE,OAAO,EAAE,OAAO,EAAE,EAAE,oBAAoB,CAAC,CAAC;QACnG,IAAI,MAAM,CAAC,QAAQ,KAAK,CAAC,EAAE,CAAC;YAC1B,MAAM,IAAI,0BAAiB,CAAC,6BAA6B,OAAO,aAAa,CAAC,CAAC;QACjF,CAAC;QACD,OAAO,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;IAC/B,CAAC;IAED,KAAK,CAAC,MAAM,CAAC,OAAY;QACvB,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,qBAAqB,CAAC,MAAM,CAAC,EAAE,OAAO,EAAE,OAAO,EAAE,CAAC,CAAC;QAC7E,IAAI,MAAM,CAAC,QAAQ,KAAK,CAAC,EAAE,CAAC;YAC1B,MAAM,IAAI,0BAAiB,CAAC,6BAA6B,OAAO,aAAa,CAAC,CAAC;QACjF,CAAC;IACH,CAAC;CACF,CAAA;AArCY,gDAAkB;6BAAlB,kBAAkB;IAD9B,IAAA,mBAAU,GAAE;IAGR,WAAA,IAAA,0BAAgB,EAAC,gCAAW,CAAC,CAAA;qCACU,oBAAU;GAHzC,kBAAkB,CAqC9B","sourcesContent":["import { Injectable, NotFoundException } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport { Planocontas } from './entities/planocontas.entity';\nimport { CreatePlanocontasDto } from './dto/create-planocontas.dto';\nimport { UpdatePlanocontasDto } from './dto/update-planocontas.dto';\n\n@Injectable()\nexport class PlanocontasService {\n  constructor(\n    @InjectRepository(Planocontas)\n    private readonly planocontasRepository: Repository<Planocontas>,\n  ) {}\n\n  async create(createPlanocontasDto: CreatePlanocontasDto): Promise<Planocontas> {\n    const newPlanocontas = this.planocontasRepository.create(createPlanocontasDto);\n    return this.planocontasRepository.save(newPlanocontas);\n  }\n\n  async findAll(): Promise<Planocontas[]> {\n    return this.planocontasRepository.find();\n  }\n\n  async findOne(ContaID: any): Promise<Planocontas> {\n    const found = await this.planocontasRepository.findOne({ where: { ContaID: ContaID } });\n    if (!found) {\n      throw new NotFoundException(`Planocontas with ContaID \"${ContaID}\" not found`);\n    }\n    return found;\n  }\n\n  async update(ContaID: any, updatePlanocontasDto: UpdatePlanocontasDto): Promise<Planocontas> {\n    const result = await this.planocontasRepository.update({ ContaID: ContaID }, updatePlanocontasDto);\n    if (result.affected === 0) {\n      throw new NotFoundException(`Planocontas with ContaID \"${ContaID}\" not found`);\n    }\n    return this.findOne(ContaID);\n  }\n\n  async remove(ContaID: any): Promise<void> {\n    const result = await this.planocontasRepository.delete({ ContaID: ContaID });\n    if (result.affected === 0) {\n      throw new NotFoundException(`Planocontas with ContaID \"${ContaID}\" not found`);\n    }\n  }\n}\n"]}