{"version":3,"file":"gruporamos.service.ts","sources":["C:\\repos\\contabil_back\\src\\modules\\gruporamos\\gruporamos.service.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;AAAA,2CAA+D;AAC/D,6CAAmD;AACnD,qCAAqC;AACrC,oEAA0D;AAKnD,IAAM,iBAAiB,GAAvB,MAAM,iBAAiB;IAC5B,YAEmB,oBAA4C;QAA5C,yBAAoB,GAApB,oBAAoB,CAAwB;IAC5D,CAAC;IAEJ,KAAK,CAAC,MAAM,CAAC,mBAAwC;QACnD,MAAM,aAAa,GAAG,IAAI,CAAC,oBAAoB,CAAC,MAAM,CAAC,mBAAmB,CAAC,CAAC;QAC5E,OAAO,IAAI,CAAC,oBAAoB,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;IACvD,CAAC;IAED,KAAK,CAAC,OAAO;QACX,OAAO,IAAI,CAAC,oBAAoB,CAAC,IAAI,EAAE,CAAC;IAC1C,CAAC;IAED,KAAK,CAAC,OAAO,CAAC,EAAO;QACnB,MAAM,KAAK,GAAG,MAAM,IAAI,CAAC,oBAAoB,CAAC,OAAO,CAAC,EAAE,KAAK,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC;QAC7E,IAAI,CAAC,KAAK,EAAE,CAAC;YACX,MAAM,IAAI,0BAAiB,CAAC,uBAAuB,EAAE,aAAa,CAAC,CAAC;QACtE,CAAC;QACD,OAAO,KAAK,CAAC;IACf,CAAC;IAED,KAAK,CAAC,MAAM,CAAC,EAAO,EAAE,mBAAwC;QAC5D,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,oBAAoB,CAAC,MAAM,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,mBAAmB,CAAC,CAAC;QACvF,IAAI,MAAM,CAAC,QAAQ,KAAK,CAAC,EAAE,CAAC;YAC1B,MAAM,IAAI,0BAAiB,CAAC,uBAAuB,EAAE,aAAa,CAAC,CAAC;QACtE,CAAC;QACD,OAAO,IAAI,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC;IAC1B,CAAC;IAED,KAAK,CAAC,MAAM,CAAC,EAAO;QAClB,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,oBAAoB,CAAC,MAAM,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC;QAClE,IAAI,MAAM,CAAC,QAAQ,KAAK,CAAC,EAAE,CAAC;YAC1B,MAAM,IAAI,0BAAiB,CAAC,uBAAuB,EAAE,aAAa,CAAC,CAAC;QACtE,CAAC;IACH,CAAC;CACF,CAAA;AArCY,8CAAiB;4BAAjB,iBAAiB;IAD7B,IAAA,mBAAU,GAAE;IAGR,WAAA,IAAA,0BAAgB,EAAC,8BAAU,CAAC,CAAA;qCACU,oBAAU;GAHxC,iBAAiB,CAqC7B","sourcesContent":["import { Injectable, NotFoundException } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport { Gruporamos } from './entities/gruporamos.entity';\nimport { CreateGruporamosDto } from './dto/create-gruporamos.dto';\nimport { UpdateGruporamosDto } from './dto/update-gruporamos.dto';\n\n@Injectable()\nexport class GruporamosService {\n  constructor(\n    @InjectRepository(Gruporamos)\n    private readonly gruporamosRepository: Repository<Gruporamos>,\n  ) {}\n\n  async create(createGruporamosDto: CreateGruporamosDto): Promise<Gruporamos> {\n    const newGruporamos = this.gruporamosRepository.create(createGruporamosDto);\n    return this.gruporamosRepository.save(newGruporamos);\n  }\n\n  async findAll(): Promise<Gruporamos[]> {\n    return this.gruporamosRepository.find();\n  }\n\n  async findOne(id: any): Promise<Gruporamos> {\n    const found = await this.gruporamosRepository.findOne({ where: { id: id } });\n    if (!found) {\n      throw new NotFoundException(`Gruporamos with id \"${id}\" not found`);\n    }\n    return found;\n  }\n\n  async update(id: any, updateGruporamosDto: UpdateGruporamosDto): Promise<Gruporamos> {\n    const result = await this.gruporamosRepository.update({ id: id }, updateGruporamosDto);\n    if (result.affected === 0) {\n      throw new NotFoundException(`Gruporamos with id \"${id}\" not found`);\n    }\n    return this.findOne(id);\n  }\n\n  async remove(id: any): Promise<void> {\n    const result = await this.gruporamosRepository.delete({ id: id });\n    if (result.affected === 0) {\n      throw new NotFoundException(`Gruporamos with id \"${id}\" not found`);\n    }\n  }\n}\n"]}