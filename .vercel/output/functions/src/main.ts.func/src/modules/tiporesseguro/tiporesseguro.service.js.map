{"version":3,"file":"tiporesseguro.service.ts","sources":["C:\\repos\\contabil_back\\src\\modules\\tiporesseguro\\tiporesseguro.service.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;AAAA,2CAA+D;AAC/D,6CAAmD;AACnD,qCAAqC;AACrC,0EAAgE;AAKzD,IAAM,oBAAoB,GAA1B,MAAM,oBAAoB;IAC/B,YAEmB,uBAAkD;QAAlD,4BAAuB,GAAvB,uBAAuB,CAA2B;IAClE,CAAC;IAEJ,KAAK,CAAC,MAAM,CAAC,sBAA8C;QACzD,MAAM,gBAAgB,GAAG,IAAI,CAAC,uBAAuB,CAAC,MAAM,CAAC,sBAAsB,CAAC,CAAC;QACrF,OAAO,IAAI,CAAC,uBAAuB,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC;IAC7D,CAAC;IAED,KAAK,CAAC,OAAO;QACX,OAAO,IAAI,CAAC,uBAAuB,CAAC,IAAI,EAAE,CAAC;IAC7C,CAAC;IAED,KAAK,CAAC,OAAO,CAAC,EAAO;QACnB,MAAM,KAAK,GAAG,MAAM,IAAI,CAAC,uBAAuB,CAAC,OAAO,CAAC,EAAE,KAAK,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC;QAChF,IAAI,CAAC,KAAK,EAAE,CAAC;YACX,MAAM,IAAI,0BAAiB,CAAC,0BAA0B,EAAE,aAAa,CAAC,CAAC;QACzE,CAAC;QACD,OAAO,KAAK,CAAC;IACf,CAAC;IAED,KAAK,CAAC,MAAM,CAAC,EAAO,EAAE,sBAA8C;QAClE,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,uBAAuB,CAAC,MAAM,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,sBAAsB,CAAC,CAAC;QAC7F,IAAI,MAAM,CAAC,QAAQ,KAAK,CAAC,EAAE,CAAC;YAC1B,MAAM,IAAI,0BAAiB,CAAC,0BAA0B,EAAE,aAAa,CAAC,CAAC;QACzE,CAAC;QACD,OAAO,IAAI,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC;IAC1B,CAAC;IAED,KAAK,CAAC,MAAM,CAAC,EAAO;QAClB,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,uBAAuB,CAAC,MAAM,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC;QACrE,IAAI,MAAM,CAAC,QAAQ,KAAK,CAAC,EAAE,CAAC;YAC1B,MAAM,IAAI,0BAAiB,CAAC,0BAA0B,EAAE,aAAa,CAAC,CAAC;QACzE,CAAC;IACH,CAAC;CACF,CAAA;AArCY,oDAAoB;+BAApB,oBAAoB;IADhC,IAAA,mBAAU,GAAE;IAGR,WAAA,IAAA,0BAAgB,EAAC,oCAAa,CAAC,CAAA;qCACU,oBAAU;GAH3C,oBAAoB,CAqChC","sourcesContent":["import { Injectable, NotFoundException } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport { Tiporesseguro } from './entities/tiporesseguro.entity';\nimport { CreateTiporesseguroDto } from './dto/create-tiporesseguro.dto';\nimport { UpdateTiporesseguroDto } from './dto/update-tiporesseguro.dto';\n\n@Injectable()\nexport class TiporesseguroService {\n  constructor(\n    @InjectRepository(Tiporesseguro)\n    private readonly tiporesseguroRepository: Repository<Tiporesseguro>,\n  ) {}\n\n  async create(createTiporesseguroDto: CreateTiporesseguroDto): Promise<Tiporesseguro> {\n    const newTiporesseguro = this.tiporesseguroRepository.create(createTiporesseguroDto);\n    return this.tiporesseguroRepository.save(newTiporesseguro);\n  }\n\n  async findAll(): Promise<Tiporesseguro[]> {\n    return this.tiporesseguroRepository.find();\n  }\n\n  async findOne(id: any): Promise<Tiporesseguro> {\n    const found = await this.tiporesseguroRepository.findOne({ where: { id: id } });\n    if (!found) {\n      throw new NotFoundException(`Tiporesseguro with id \"${id}\" not found`);\n    }\n    return found;\n  }\n\n  async update(id: any, updateTiporesseguroDto: UpdateTiporesseguroDto): Promise<Tiporesseguro> {\n    const result = await this.tiporesseguroRepository.update({ id: id }, updateTiporesseguroDto);\n    if (result.affected === 0) {\n      throw new NotFoundException(`Tiporesseguro with id \"${id}\" not found`);\n    }\n    return this.findOne(id);\n  }\n\n  async remove(id: any): Promise<void> {\n    const result = await this.tiporesseguroRepository.delete({ id: id });\n    if (result.affected === 0) {\n      throw new NotFoundException(`Tiporesseguro with id \"${id}\" not found`);\n    }\n  }\n}\n"]}