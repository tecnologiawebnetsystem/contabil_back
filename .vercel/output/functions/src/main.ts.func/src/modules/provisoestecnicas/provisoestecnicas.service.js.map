{"version":3,"file":"provisoestecnicas.service.ts","sources":["C:\\repos\\contabil_back\\src\\modules\\provisoestecnicas\\provisoestecnicas.service.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;AAAA,2CAA+D;AAC/D,6CAAmD;AACnD,qCAAqC;AACrC,kFAAwE;AAKjE,IAAM,wBAAwB,GAA9B,MAAM,wBAAwB;IACnC,YAEmB,2BAA0D;QAA1D,gCAA2B,GAA3B,2BAA2B,CAA+B;IAC1E,CAAC;IAEJ,KAAK,CAAC,MAAM,CAAC,0BAAsD;QACjE,MAAM,oBAAoB,GAAG,IAAI,CAAC,2BAA2B,CAAC,MAAM,CAAC,0BAA0B,CAAC,CAAC;QACjG,OAAO,IAAI,CAAC,2BAA2B,CAAC,IAAI,CAAC,oBAAoB,CAAC,CAAC;IACrE,CAAC;IAED,KAAK,CAAC,OAAO;QACX,OAAO,IAAI,CAAC,2BAA2B,CAAC,IAAI,EAAE,CAAC;IACjD,CAAC;IAED,KAAK,CAAC,OAAO,CAAC,UAAe;QAC3B,MAAM,KAAK,GAAG,MAAM,IAAI,CAAC,2BAA2B,CAAC,OAAO,CAAC,EAAE,KAAK,EAAE,EAAE,UAAU,EAAE,UAAU,EAAE,EAAE,CAAC,CAAC;QACpG,IAAI,CAAC,KAAK,EAAE,CAAC;YACX,MAAM,IAAI,0BAAiB,CAAC,sCAAsC,UAAU,aAAa,CAAC,CAAC;QAC7F,CAAC;QACD,OAAO,KAAK,CAAC;IACf,CAAC;IAED,KAAK,CAAC,MAAM,CAAC,UAAe,EAAE,0BAAsD;QAClF,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,2BAA2B,CAAC,MAAM,CAAC,EAAE,UAAU,EAAE,UAAU,EAAE,EAAE,0BAA0B,CAAC,CAAC;QACrH,IAAI,MAAM,CAAC,QAAQ,KAAK,CAAC,EAAE,CAAC;YAC1B,MAAM,IAAI,0BAAiB,CAAC,sCAAsC,UAAU,aAAa,CAAC,CAAC;QAC7F,CAAC;QACD,OAAO,IAAI,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC;IAClC,CAAC;IAED,KAAK,CAAC,MAAM,CAAC,UAAe;QAC1B,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,2BAA2B,CAAC,MAAM,CAAC,EAAE,UAAU,EAAE,UAAU,EAAE,CAAC,CAAC;QACzF,IAAI,MAAM,CAAC,QAAQ,KAAK,CAAC,EAAE,CAAC;YAC1B,MAAM,IAAI,0BAAiB,CAAC,sCAAsC,UAAU,aAAa,CAAC,CAAC;QAC7F,CAAC;IACH,CAAC;CACF,CAAA;AArCY,4DAAwB;mCAAxB,wBAAwB;IADpC,IAAA,mBAAU,GAAE;IAGR,WAAA,IAAA,0BAAgB,EAAC,4CAAiB,CAAC,CAAA;qCACU,oBAAU;GAH/C,wBAAwB,CAqCpC","sourcesContent":["import { Injectable, NotFoundException } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport { Provisoestecnicas } from './entities/provisoestecnicas.entity';\nimport { CreateProvisoestecnicasDto } from './dto/create-provisoestecnicas.dto';\nimport { UpdateProvisoestecnicasDto } from './dto/update-provisoestecnicas.dto';\n\n@Injectable()\nexport class ProvisoestecnicasService {\n  constructor(\n    @InjectRepository(Provisoestecnicas)\n    private readonly provisoestecnicasRepository: Repository<Provisoestecnicas>,\n  ) {}\n\n  async create(createProvisoestecnicasDto: CreateProvisoestecnicasDto): Promise<Provisoestecnicas> {\n    const newProvisoestecnicas = this.provisoestecnicasRepository.create(createProvisoestecnicasDto);\n    return this.provisoestecnicasRepository.save(newProvisoestecnicas);\n  }\n\n  async findAll(): Promise<Provisoestecnicas[]> {\n    return this.provisoestecnicasRepository.find();\n  }\n\n  async findOne(ProvisaoID: any): Promise<Provisoestecnicas> {\n    const found = await this.provisoestecnicasRepository.findOne({ where: { ProvisaoID: ProvisaoID } });\n    if (!found) {\n      throw new NotFoundException(`Provisoestecnicas with ProvisaoID \"${ProvisaoID}\" not found`);\n    }\n    return found;\n  }\n\n  async update(ProvisaoID: any, updateProvisoestecnicasDto: UpdateProvisoestecnicasDto): Promise<Provisoestecnicas> {\n    const result = await this.provisoestecnicasRepository.update({ ProvisaoID: ProvisaoID }, updateProvisoestecnicasDto);\n    if (result.affected === 0) {\n      throw new NotFoundException(`Provisoestecnicas with ProvisaoID \"${ProvisaoID}\" not found`);\n    }\n    return this.findOne(ProvisaoID);\n  }\n\n  async remove(ProvisaoID: any): Promise<void> {\n    const result = await this.provisoestecnicasRepository.delete({ ProvisaoID: ProvisaoID });\n    if (result.affected === 0) {\n      throw new NotFoundException(`Provisoestecnicas with ProvisaoID \"${ProvisaoID}\" not found`);\n    }\n  }\n}\n"]}