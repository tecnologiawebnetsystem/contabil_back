{"version":3,"file":"tipocontabilizacao.service.ts","sources":["C:\\repos\\contabil_back\\src\\modules\\tipocontabilizacao\\tipocontabilizacao.service.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;AAAA,2CAA+D;AAC/D,6CAAmD;AACnD,qCAAqC;AACrC,oFAA0E;AAKnE,IAAM,yBAAyB,GAA/B,MAAM,yBAAyB;IACpC,YAEmB,4BAA4D;QAA5D,iCAA4B,GAA5B,4BAA4B,CAAgC;IAC5E,CAAC;IAEJ,KAAK,CAAC,MAAM,CAAC,2BAAwD;QACnE,MAAM,qBAAqB,GAAG,IAAI,CAAC,4BAA4B,CAAC,MAAM,CAAC,2BAA2B,CAAC,CAAC;QACpG,OAAO,IAAI,CAAC,4BAA4B,CAAC,IAAI,CAAC,qBAAqB,CAAC,CAAC;IACvE,CAAC;IAED,KAAK,CAAC,OAAO;QACX,OAAO,IAAI,CAAC,4BAA4B,CAAC,IAAI,EAAE,CAAC;IAClD,CAAC;IAED,KAAK,CAAC,OAAO,CAAC,EAAO;QACnB,MAAM,KAAK,GAAG,MAAM,IAAI,CAAC,4BAA4B,CAAC,OAAO,CAAC,EAAE,KAAK,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC;QACrF,IAAI,CAAC,KAAK,EAAE,CAAC;YACX,MAAM,IAAI,0BAAiB,CAAC,+BAA+B,EAAE,aAAa,CAAC,CAAC;QAC9E,CAAC;QACD,OAAO,KAAK,CAAC;IACf,CAAC;IAED,KAAK,CAAC,MAAM,CAAC,EAAO,EAAE,2BAAwD;QAC5E,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,4BAA4B,CAAC,MAAM,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,2BAA2B,CAAC,CAAC;QACvG,IAAI,MAAM,CAAC,QAAQ,KAAK,CAAC,EAAE,CAAC;YAC1B,MAAM,IAAI,0BAAiB,CAAC,+BAA+B,EAAE,aAAa,CAAC,CAAC;QAC9E,CAAC;QACD,OAAO,IAAI,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC;IAC1B,CAAC;IAED,KAAK,CAAC,MAAM,CAAC,EAAO;QAClB,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,4BAA4B,CAAC,MAAM,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC;QAC1E,IAAI,MAAM,CAAC,QAAQ,KAAK,CAAC,EAAE,CAAC;YAC1B,MAAM,IAAI,0BAAiB,CAAC,+BAA+B,EAAE,aAAa,CAAC,CAAC;QAC9E,CAAC;IACH,CAAC;CACF,CAAA;AArCY,8DAAyB;oCAAzB,yBAAyB;IADrC,IAAA,mBAAU,GAAE;IAGR,WAAA,IAAA,0BAAgB,EAAC,8CAAkB,CAAC,CAAA;qCACU,oBAAU;GAHhD,yBAAyB,CAqCrC","sourcesContent":["import { Injectable, NotFoundException } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport { Tipocontabilizacao } from './entities/tipocontabilizacao.entity';\nimport { CreateTipocontabilizacaoDto } from './dto/create-tipocontabilizacao.dto';\nimport { UpdateTipocontabilizacaoDto } from './dto/update-tipocontabilizacao.dto';\n\n@Injectable()\nexport class TipocontabilizacaoService {\n  constructor(\n    @InjectRepository(Tipocontabilizacao)\n    private readonly tipocontabilizacaoRepository: Repository<Tipocontabilizacao>,\n  ) {}\n\n  async create(createTipocontabilizacaoDto: CreateTipocontabilizacaoDto): Promise<Tipocontabilizacao> {\n    const newTipocontabilizacao = this.tipocontabilizacaoRepository.create(createTipocontabilizacaoDto);\n    return this.tipocontabilizacaoRepository.save(newTipocontabilizacao);\n  }\n\n  async findAll(): Promise<Tipocontabilizacao[]> {\n    return this.tipocontabilizacaoRepository.find();\n  }\n\n  async findOne(id: any): Promise<Tipocontabilizacao> {\n    const found = await this.tipocontabilizacaoRepository.findOne({ where: { id: id } });\n    if (!found) {\n      throw new NotFoundException(`Tipocontabilizacao with id \"${id}\" not found`);\n    }\n    return found;\n  }\n\n  async update(id: any, updateTipocontabilizacaoDto: UpdateTipocontabilizacaoDto): Promise<Tipocontabilizacao> {\n    const result = await this.tipocontabilizacaoRepository.update({ id: id }, updateTipocontabilizacaoDto);\n    if (result.affected === 0) {\n      throw new NotFoundException(`Tipocontabilizacao with id \"${id}\" not found`);\n    }\n    return this.findOne(id);\n  }\n\n  async remove(id: any): Promise<void> {\n    const result = await this.tipocontabilizacaoRepository.delete({ id: id });\n    if (result.affected === 0) {\n      throw new NotFoundException(`Tipocontabilizacao with id \"${id}\" not found`);\n    }\n  }\n}\n"]}