{"version":3,"file":"companhiasseguros.service.ts","sources":["C:\\repos\\contabil_back\\src\\modules\\companhiasseguros\\companhiasseguros.service.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;AAAA,2CAA+D;AAC/D,6CAAmD;AACnD,qCAAqC;AACrC,kFAAwE;AAKjE,IAAM,wBAAwB,GAA9B,MAAM,wBAAwB;IACnC,YAEmB,2BAA0D;QAA1D,gCAA2B,GAA3B,2BAA2B,CAA+B;IAC1E,CAAC;IAEJ,KAAK,CAAC,MAAM,CAAC,0BAAsD;QACjE,MAAM,oBAAoB,GAAG,IAAI,CAAC,2BAA2B,CAAC,MAAM,CAAC,0BAA0B,CAAC,CAAC;QACjG,oBAAoB,CAAC,WAAW,GAAG,IAAI,IAAI,EAAE,CAAC;QAC9C,oBAAoB,CAAC,eAAe,GAAG,IAAI,IAAI,EAAE,CAAC;QAClD,OAAO,IAAI,CAAC,2BAA2B,CAAC,IAAI,CAAC,oBAAoB,CAAC,CAAC;IACrE,CAAC;IAED,KAAK,CAAC,OAAO;QACX,OAAO,IAAI,CAAC,2BAA2B,CAAC,IAAI,EAAE,CAAC;IACjD,CAAC;IAED,KAAK,CAAC,OAAO,CAAC,WAAgB;QAC5B,MAAM,KAAK,GAAG,MAAM,IAAI,CAAC,2BAA2B,CAAC,OAAO,CAAC,EAAE,KAAK,EAAE,EAAE,WAAW,EAAE,WAAW,EAAE,EAAE,CAAC,CAAC;QACtG,IAAI,CAAC,KAAK,EAAE,CAAC;YACX,MAAM,IAAI,0BAAiB,CAAC,uCAAuC,WAAW,aAAa,CAAC,CAAC;QAC/F,CAAC;QACD,OAAO,KAAK,CAAC;IACf,CAAC;IAED,KAAK,CAAC,MAAM,CAAC,WAAgB,EAAE,0BAAsD;QACnF,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,2BAA2B,CAAC,MAAM,CAAC,EAAE,WAAW,EAAE,WAAW,EAAE,EAAE,0BAA0B,CAAC,CAAC;QACvH,IAAI,MAAM,CAAC,QAAQ,KAAK,CAAC,EAAE,CAAC;YAC1B,MAAM,IAAI,0BAAiB,CAAC,uCAAuC,WAAW,aAAa,CAAC,CAAC;QAC/F,CAAC;QACD,OAAO,IAAI,CAAC,OAAO,CAAC,WAAW,CAAC,CAAC;IACnC,CAAC;IAED,KAAK,CAAC,MAAM,CAAC,WAAgB;QAC3B,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,2BAA2B,CAAC,MAAM,CAAC,EAAE,WAAW,EAAE,WAAW,EAAE,CAAC,CAAC;QAC3F,IAAI,MAAM,CAAC,QAAQ,KAAK,CAAC,EAAE,CAAC;YAC1B,MAAM,IAAI,0BAAiB,CAAC,uCAAuC,WAAW,aAAa,CAAC,CAAC;QAC/F,CAAC;IACH,CAAC;CACF,CAAA;AAvCY,4DAAwB;mCAAxB,wBAAwB;IADpC,IAAA,mBAAU,GAAE;IAGR,WAAA,IAAA,0BAAgB,EAAC,4CAAiB,CAAC,CAAA;qCACU,oBAAU;GAH/C,wBAAwB,CAuCpC","sourcesContent":["import { Injectable, NotFoundException } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport { Companhiasseguros } from './entities/companhiasseguros.entity';\nimport { CreateCompanhiassegurosDto } from './dto/create-companhiasseguros.dto';\nimport { UpdateCompanhiassegurosDto } from './dto/update-companhiasseguros.dto';\n\n@Injectable()\nexport class CompanhiassegurosService {\n  constructor(\n    @InjectRepository(Companhiasseguros)\n    private readonly companhiassegurosRepository: Repository<Companhiasseguros>,\n  ) {}\n\n  async create(createCompanhiassegurosDto: CreateCompanhiassegurosDto): Promise<Companhiasseguros> {\n    const newCompanhiasseguros = this.companhiassegurosRepository.create(createCompanhiassegurosDto);\n    newCompanhiasseguros.DataCriacao = new Date();\n    newCompanhiasseguros.DataAtualizacao = new Date();\n    return this.companhiassegurosRepository.save(newCompanhiasseguros);\n  }\n\n  async findAll(): Promise<Companhiasseguros[]> {\n    return this.companhiassegurosRepository.find();\n  }\n\n  async findOne(CompanhiaID: any): Promise<Companhiasseguros> {\n    const found = await this.companhiassegurosRepository.findOne({ where: { CompanhiaID: CompanhiaID } });\n    if (!found) {\n      throw new NotFoundException(`Companhiasseguros with CompanhiaID \"${CompanhiaID}\" not found`);\n    }\n    return found;\n  }\n\n  async update(CompanhiaID: any, updateCompanhiassegurosDto: UpdateCompanhiassegurosDto): Promise<Companhiasseguros> {\n    const result = await this.companhiassegurosRepository.update({ CompanhiaID: CompanhiaID }, updateCompanhiassegurosDto);\n    if (result.affected === 0) {\n      throw new NotFoundException(`Companhiasseguros with CompanhiaID \"${CompanhiaID}\" not found`);\n    }\n    return this.findOne(CompanhiaID);\n  }\n\n  async remove(CompanhiaID: any): Promise<void> {\n    const result = await this.companhiassegurosRepository.delete({ CompanhiaID: CompanhiaID });\n    if (result.affected === 0) {\n      throw new NotFoundException(`Companhiasseguros with CompanhiaID \"${CompanhiaID}\" not found`);\n    }\n  }\n}\n"]}